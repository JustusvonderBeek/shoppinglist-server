# syntax=docker/dockerfile:1

# For more infos on multistage, see: https://docs.docker.com/language/golang/build-images/
# The idea is to strip the compiler and other stuff and make
# the final image smaller and more secure

FROM golang:1.23 AS build-stage
WORKDIR /shopping-list-server

# Copying the go.mod and go.sum files into the images to get ready for compilation
COPY go.mod ./
# Now download the dependencies
RUN go mod download
# Copy the src files and other directories into the image
COPY internal ./internal
COPY setup ./setup
COPY cmd/shopping-list-server/main.go ./cmd/shopping-list-server/main.go
COPY go.sum ./

# Compile the application
RUN CGO_ENABLED=0 GOOS=linux go build -o ./app-server ./cmd/shopping-list-server

# Copy the configuration
COPY resources/dockerDb.json ./resources/db.json
COPY resources/jwtSecret.json ./resources/jwtSecret.json
COPY resources/shop.cloudsheeptech.com.crt ./resources/shop.cloudsheeptech.com.crt
COPY resources/shop.cloudsheeptech.com.pem ./resources/shop.cloudsheeptech.com.pem

# Now we switch to the stage where we only deploy the application
FROM gcr.io/distroless/static-debian12 AS build-release-stage

WORKDIR /shopping-list-server

COPY --from=build-stage /shopping-list-server/app-server ./app-server
COPY --from=build-stage /shopping-list-server/resources ./resources/

# Only documentation
EXPOSE 41652

# Starting the go application
ENTRYPOINT [ "/shopping-list-server/app-server" ]