openapi: 3.0.3
info:
  title: Shopping-List API
  description: The remote API for the shopping list application to exchange items to buy.
  version: "1.0"
servers:
- url: https://shop.cloudsheeptech.com:{port}/{basePath}
  description: Production server
  variables:
    port:
      default: "46152"
      enum:
      - "46152"
    basePath:
      default: "v1"
- url: http://localhost:{port}/{basePath}
  description: Development server
  variables:
    port:
      default: "46152"
      enum:
        - "46152"
    basePath:
      default: "v1"
security:
- ApiKey: []
- bearerAuth: []
paths:
  /users:
    post:
      tags:
      - User Handling
      description: Create a new user at the service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201":
          description: Created
        "401":
          description: API key required but not provided
          headers:
            WWW_Authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /users/{userId}:
    get:
      tags:
      - User Handling
      description: Receive user information from the service
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: API key required but not provided
          headers:
            WWW_Authenticate:
              style: simple
              explode: false
              schema:
                type: string
        "404":
          description: Not found
    put:
      tags:
      - User Handling
      description: Updating an existing user
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: OK
        "401":
          description: API key required but not provided
          headers:
            WWW_Authenticate:
              style: simple
              explode: false
              schema:
                type: string
        "404":
          description: User not found
    delete:
      tags:
      - User Handling
      description: Deleting an existing user. Can only be initiated by the user itself
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
        "410":
          description: Gone
  /users/{userId}/login:
    post:
      tags:
      - User Handling
      description: Login with with id and credentials to access resources.
      parameters:
        - name: userId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    format: byte
                    example: "eeaaff123"
  /lists:
    get:
      tags:
      - List Handling
      description: Retrieve all lists for the current user. Includes shared lists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/List'
        "401":
          description: API key required but not provided
          headers:
            WWW_Authenticate:
              style: simple
              explode: false
              schema:
                type: string
    post:
      tags:
      - List Handling
      description: Creating a new list for the current user
      parameters:
      - name: createdBy
        in: query
        description: The creator of the list that is retrieved
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
      responses:
        "201":
          description: Created
        "401":
          description: API key required but not provided
          headers:
            WWW_Authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /users/name:
    get:
      tags:
      - List Sharing
      description: Receive all users with a matching name (matching according to contains)
      parameters:
      - name: username
        in: query
        required: true
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "401":
          description: API key required but not provided
          headers:
            WWW_Authenticate:
              style: simple
              explode: false
              schema:
                type: string
        "404":
          description: Not found
  /lists/{listId}:
    get:
      tags:
      - List Handling
      description: Retrieve the specific list either created by the user or shared with the current user.
      parameters:
      - name: listId
        in: path
        description: The id of the list which is queried to be received
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: createdBy
        in: query
        description: The creator of the list that is retrieved. Can be different from the requesting user if the list is shared.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        "401":
          description: API key required but not provided
          headers:
            WWW_Authenticate:
              style: simple
              explode: false
              schema:
                type: string
    put:
      tags:
      - List Handling
      description: Update an existing list with new items
      parameters:
      - name: listId
        in: path
        description: The id of the list which is updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: createdBy
        in: query
        description: The creator of the list that is updated. Can be different from the requester when the list is shared.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ListItem'
      responses:
        "201":
          description: Created
        "401":
          description: API key required but not provided
          headers:
            WWW_Authenticate:
              style: simple
              explode: false
              schema:
                type: string
    delete:
      tags:
      - List Handling
      description: Delete an existing list. Can only be issued by the user who created the list.
      responses:
        "200":
          description: OK
        "202":
          description: Accepted
  /share:
    get:
      tags:
      - List Sharing
      description: Retrieve the information which lists are shared with whom.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200'
        "401":
          description: API key required but not provided
          headers:
            WWW_Authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /share/{listId}:
    put:
      tags:
      - List Sharing
      description: Add the given users to the sharing. Replaces the existing sharing.
      parameters:
      - name: listId
        in: path
        description: The id of the list which sharing should be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sharing'
      responses:
        "201":
          description: Created
        "401":
          description: API key required but not provided
          headers:
            WWW_Authenticate:
              style: simple
              explode: false
              schema:
                type: string
    post:
      tags:
      - List Sharing
      description: Share the given list with the user contained in the request body. The list can only be shared by the original owner and creator.
      parameters:
      - name: listId
        in: path
        description: The id of the list that should be shared
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sharing'
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: API key required but not provided
          headers:
            WWW_Authenticate:
              style: simple
              explode: false
              schema:
                type: string
    delete:
      tags:
      - List Sharing
      description: Unshare the given list with the user(s).
      parameters:
      - name: listId
        in: path
        description: The id of the list that should be unshared
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
        "401":
          description: API key required but not provided
          headers:
            WWW_Authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /recipe:
    post:
      tags:
      - Recipe Handling
      description: Create a new recipe at the server
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        "201":
          description: Created
        "401":
          description: API key required but not provided
          headers:
            WWW_Authenticate:
              style: simple
              explode: false
              schema:
                type: string
    get:
      tags:
        - Recipe Handling
      description: Get all own and shared recipes.
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
  /recipe/{recipeId}:
    get:
      tags:
      - Recipe Handling
      description: Retrieve the selected recipe.
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        "404":
          description: Not found
    put:
      tags:
      - Recipe Handling
      description: Update a given recipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        "200":
          description: Ok
        "404":
          description: Not found
    delete:
      tags:
        - Recipe Handling
      description: Delete an own recipe.
      responses:
        "200":
          description: Ok
        "404":
          description: Not found
  /recipe/share/{recipeId}:
    post:
      tags:
      - Recipe Share Handling
      description: Share the given recipe with a user whom id was obtained before.
      parameters:
        - name: sharedWith
          in: query
          required: true
          allowEmptyValue: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 4321
      responses:
        "200":
          description: Ok
        "400":
          description: Bad request
    delete:
      tags:
      - Recipe Share Handling
      description: Unshare the given recipe with a user whom id was obtained before.
      parameters:
        - name: sharedWith
          in: query
          required: true
          allowEmptyValue: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 4321
      responses:
        "200":
          description: Ok
        "400":
          description: Bad request
  /recipe/{websiteName}:
    post:
      tags:
      - Recipe Handling
      description: Convert and download a recipe from the given website.
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        "404":
          description: Not found
        "400":
          description: Bad request
  /price/{itemName}:
    get:
      tags:
      - Price Handling
      description: Receive possible prices for an item with the queried name
      parameters:
      - name: itemName
        in: query
        required: true
        allowEmptyValue: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Price'
        "404":
          description: Not found
components:
  schemas:
    User:
      type: object
      properties:
        onlineId:
          type: integer
          format: int32
          example: 12344
        username:
          maxLength: 40
          type: string
          example: markus
        password:
          minLength: 32
          type: string
          format: byte
          nullable: true
          example: secure as hell
        created:
          type: string
          format: date-time
          nullable: true
          example: 2024-08-09T19:37:21Z
        lastLogin:
          type: string
          format: date-time
          nullable: true
          example: 2024-08-09T19:37:21Z
      description: The online user for operations
    ListUser:
      type: object
      properties:
        onlineId:
          type: integer
          format: int32
          example: 12344
        username:
          type: string
          example: "list creator"
    Sharing:
      type: object
      properties:
        sharedBy:
          type: integer
          format: int32
          example: 123443
        sharedWith:
          type: array
          items:
            type: integer
            format: int32
            example: 15331
        created:
          type: string
          format: date-time
          example: 2024-08-09T19:37:21Z
      description: Detailed description what list to share with which user
    Item:
      type: object
      properties:
        name:
          maxLength: 100
          type: string
        icon:
          type: string
          description: The item might contains an optional image
          format: byte
          nullable: true
          example: ea16feea
      description: An item that can be bought
    ListItem:
      type: object
      description: The item send inside an online list
      allOf:
      - $ref: '#/components/schemas/Item'
      - type: object
        properties:
          quantity:
            type: integer
            format: int32
            example: 2
          checked:
            type: boolean
            example: true
          addedBy:
            type: integer
            example: 12663
    List:
      type: object
      properties:
        listId:
          type: integer
          format: int32
          example: 121633
        title:
          maxLength: 50
          type: string
          example: groceries
        elements:
          type: integer
          format: int32
          example: 2
        createdBy:
          $ref: '#/components/schemas/ListUser'
        createdAt:
          type: string
          format: date-time
          nullable: true
          example: 2024-08-09T19:37:21Z
        lastUpdated:
          type: string
          format: date-time
          nullable: false
          example: 2024-08-09T19:37:21Z
        items:
          type: array
          items:
            $ref: '#/components/schemas/ListItem'
      description: The list containing items to buy
    Quantity:
      type: object
      properties:
        quantity:
          type: integer
          format: int32
          example: 300
        quantityType:
          maxLength: 10
          type: string
          example: g
      description: The quantity and type of quantity for some item
    Ingredient:
      description: "An ingredient for a receipt with quantity, name and more"
      allOf:
      - $ref: '#/components/schemas/Item'
      - $ref: '#/components/schemas/Quantity'
    RecipeStep:
      type: object
      properties:
        step:
          type: string
          example: mix the eggs and milk together
      description: "A single step in a receipt, including what items to use, how much and the order and description of the actions."
    Recipe:
      type: object
      properties:
        receiptId:
          type: integer
          format: int32
          example: 88123
        name:
          maxLength: 100
          type: string
          example: Pancakes
        createdBy:
          type: integer
          format: int32
          example: 121633
        createdAt:
          type: string
          format: date-time
          example: 2024-08-09T19:37:21Z
        lastUpdated:
          type: string
          format: date-time
          example: 2024-08-09T19:37:21Z
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        description:
          type: array
          items:
            $ref: '#/components/schemas/RecipeStep'
      description: A receipt to cook or buy
    inline_response_200:
      type: object
      properties:
        listId:
          type: integer
          format: int32
          example: 1233
        sharedWith:
          type: array
          items:
            type: integer
            example: 1066
    Price:
      type: object
      properties:
        article:
          type: string
          example: "apfel"
        price:
          type: integer
          example: 1.99
        promotionPrice:
          type: integer
          example: 1.12
        currency:
          type: string
          example: "€"
        retailer:
          type: string
          example: "lidl"
    RecipeSharing:
      type: object
      properties:
        recipeId:
          type: integer
          format: int32
          example: 1
        createdBy:
          type: integer
          format: int32
          example: 1499
        sharedWith:
          type: integer
          format: int32
          example: 1234
  responses:
    UnauthorizedError:
      description: API key required but not provided
      headers:
        WWW_Authenticate:
          style: simple
          explode: false
          schema:
            type: string
    UnauthorizedBearerError:
      description: Invalid bearer token provided
  securitySchemes:
    ApiKey:
      type: apiKey
      name: X-API-KEY
      in: header
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT